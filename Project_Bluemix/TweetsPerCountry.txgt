####################################################
# Tweets per Country ###############################
# Bar Chart ############# ##########################
####################################################
#Scala Notebook Logic
####################################################

val sqlContext = new org.apache.spark.sql.SQLContext(sc)

val dashdataDF = sqlContext.load("jdbc", Map(
"url" -> "jdbc:db2://bluemix05.bluforcloud.com:50000/BLUDB:user=dash019411;password=2k3n2TR3x3mb;",
"dbtable" -> "DASH019411.NORED"))

dashdataDF.registerTempTable("tweetdata")
sqlContext.cacheTable("tweetdata")
val results = sqlContext.sql("SELECT TWEET_USER_SCREEN_NAME, MAX(TWEET_USER_FOLLOWERS_COUNT) AS TWEET_USER_FOLLOWERS_COUNT FROM tweetdata group by TWEET_USER_SCREEN_NAME order by TWEET_USER_FOLLOWERS_COUNT DESC LIMIT 10")
results.cache()
results.count()
results.collect
results.repartition(1).saveAsParquetFile("swift://notebooks.spark/Top10UsersWithFollowers.parquet")

####################################################
#Python Notebook Logic
####################################################

# Import SQLContext and data types
from pyspark.sql import SQLContext
from pyspark.sql.types import *
%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt 
# sc is an existing SparkContext.
sqlContext = SQLContext(sc)
     
parquetFile = sqlContext.read.parquet("swift://notebooks.spark/Top10UsersWithFollowers.parquet")
#print parquetFile
     
parquetFile.registerTempTable("FCountPerUser");
sqlContext.cacheTable("FCountPerUser")
tweets = sqlContext.sql("SELECT * FROM FCountPerUser order by TWEET_USER_FOLLOWERS_COUNT desc")
resultCount = tweets.count()
tweets.cache()
print resultCount
#tweets.collect()
FCountList = [0] * resultCount
for i in range(0, resultCount-1):
    FCountList[i] = sqlContext.sql("select TWEET_USER_FOLLOWERS_COUNT as followersCount from FCountPerUser order by followersCount").collect()[i].followersCount
print FCountList
UsersList = [0] * resultCount
for i in range(0, resultCount-1):
    UsersList[i] = sqlContext.sql("select TWEET_USER_SCREEN_NAME as UserName from FCountPerUser").collect()[i].UserName
#totRecords = sqlContext.sql("select count(1) as totRecords from tweetsperlang").collect()[0].totRecords
totRecords = 10
print totRecords
ind=np.arange(totRecords)
width = 0.35
fig = plt.figure()
plt.bar(ind, FCountList, width, color='g', label = "distributions")
params = plt.gcf()
plSize = params.get_size_inches()
params.set_size_inches( (plSize[0]*5, plSize[1]*5) )
plt.ylabel('Followers count')
plt.xlabel('Users')
plt.title('Distribution of tweets by Language')
plt.xticks(ind+width, UsersList)
plt.legend()
 
plt.show()