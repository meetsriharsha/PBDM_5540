####################################################
# Top 20 Active Users ###############################
# Bar Chart ############# ##########################
####################################################
#Scala Notebook Logic
####################################################

val sqlContext = new org.apache.spark.sql.SQLContext(sc)

val dashdataDF = sqlContext.load("jdbc", Map(
"url" -> "jdbc:db2://bluemix05.bluforcloud.com:50000/BLUDB:user=dash019411;password=2k3n2TR3x3mb;",
"dbtable" -> "DASH019411.NORED"))

dashdataDF.registerTempTable("tweetdata")
sqlContext.cacheTable("tweetdata")
val results = sqlContext.sql("SELECT TWEET_ID, MAX(TWEET_RETWEET_COUNT) AS TWEET_RETWEET_COUNT FROM tweetdata group by TWEET_ID order by MAX(TWEET_RETWEET_COUNT) DESC LIMIT 20")
results.cache()
results.count()
results.collect
results.repartition(1).saveAsParquetFile("swift://notebooks.spark/Top20RetweetedTweets.parquet")

####################################################
#Python Notebook Logic
####################################################

# Import SQLContext and data types
from pyspark.sql import SQLContext
from pyspark.sql.types import *
%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt 
# sc is an existing SparkContext.
sqlContext = SQLContext(sc)
     
parquetFile = sqlContext.read.parquet("swift://notebooks.spark/Top20RetweetedTweets.parquet")
#print parquetFile
     
parquetFile.registerTempTable("Retweets");
sqlContext.cacheTable("Retweets")
tweets = sqlContext.sql("SELECT * FROM Retweets order by TWEET_RETWEET_COUNT desc")
resultCount = tweets.count()
tweets.cache()
print resultCount
#tweets.collect()
RTCountList = [0] * resultCount
for i in range(0, resultCount-1):
    RTCountList[i] = sqlContext.sql("select TWEET_RETWEET_COUNT as retweetCount from Retweets order by TWEET_RETWEET_COUNT").collect()[i].retweetCount
print TCountList
tweetList = [0] * resultCount
for i in range(0, resultCount-1):
    tweetList[i] = sqlContext.sql("select TWEET_ID as tweetID from Retweets  order by TWEET_RETWEET_COUNT").collect()[i].tweetID
#totRecords = sqlContext.sql("select count(1) as totRecords from tweetsperlang").collect()[0].totRecords
totRecords = 20
print totRecords
ind=np.arange(totRecords)
width = 0.35
fig = plt.figure()
plt.bar(ind, RTCountList, width, color='g', label = "distributions")
params = plt.gcf()
plSize = params.get_size_inches()
params.set_size_inches( (plSize[0]*5, plSize[1]*5) )
plt.ylabel('Statuses count')
plt.xlabel('User Screen Names')
plt.title('Top 20 Active Users')
plt.xticks(ind+width, tweetList)
plt.legend()
 
plt.show()